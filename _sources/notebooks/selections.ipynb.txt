{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9c5d9dcd",
   "metadata": {},
   "source": [
    "# Selections\n",
    "\n",
    "Selections on parameters including flux, distance and any auxiliary variables, can be performed in arbitrarily complex way.\n",
    "We are familiar now with how to add selections onto fluxes and distances, now we will examine in more detail.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "58660c9f",
   "metadata": {},
   "source": [
    "## built in selection functions\n",
    "\n",
    "There are several available selection functions:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "d341c6c9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-13T07:54:50.213222Z",
     "iopub.status.busy": "2022-06-13T07:54:50.212901Z",
     "iopub.status.idle": "2022-06-13T07:54:53.615905Z",
     "shell.execute_reply": "2022-06-13T07:54:53.613839Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DummySelection\n",
      "UnitySelection\n",
      "BernoulliSelection\n",
      "BoxSelection\n",
      "LowerBound\n",
      "UpperBound\n",
      "SoftSelection\n",
      "HardFluxSelection\n",
      "SoftFluxSelection\n",
      "GalacticPlaneSelection\n",
      "DistanceSelection\n"
     ]
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "%matplotlib inline\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "\n",
    "jtplot.style(context=\"notebook\", fscale=1, grid=False)\n",
    "purple = \"#B833FF\"\n",
    "yellow = \"#F6EF5B\"\n",
    "\n",
    "import popsynth\n",
    "\n",
    "popsynth.loud_mode()\n",
    "popsynth.list_available_selection_functions()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "be84a6df",
   "metadata": {},
   "source": [
    "We can use these to set selections on parameters. Let's add a dummy parameter that is sampled from a normal distribution:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "5011f2e6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-13T07:54:53.620198Z",
     "iopub.status.busy": "2022-06-13T07:54:53.619688Z",
     "iopub.status.idle": "2022-06-13T07:54:53.623471Z",
     "shell.execute_reply": "2022-06-13T07:54:53.622809Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "aux_parameter = popsynth.NormalAuxSampler(name=\"dummy\", observed=False)\n",
    "aux_parameter.mu = 0\n",
    "aux_parameter.sigma = 1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d68cfcdd",
   "metadata": {},
   "source": [
    "Now we will use the built in Box selection function. Here, we will assign it to an auxiliary sampler, so we need to tell it to select on the observed value:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "54c702ce",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-13T07:54:53.626734Z",
     "iopub.status.busy": "2022-06-13T07:54:53.626304Z",
     "iopub.status.idle": "2022-06-13T07:54:53.629892Z",
     "shell.execute_reply": "2022-06-13T07:54:53.629217Z"
    }
   },
   "outputs": [],
   "source": [
    "box_select = popsynth.BoxSelection(name=\"aux_selector\", use_obs_value=True)\n",
    "box_select.vmin = 0\n",
    "box_select.vmax = 0.5"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "529f983a",
   "metadata": {},
   "source": [
    "We can also add on a selection function for the flux"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "13df3a76",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-13T07:54:53.632999Z",
     "iopub.status.busy": "2022-06-13T07:54:53.632643Z",
     "iopub.status.idle": "2022-06-13T07:54:53.635941Z",
     "shell.execute_reply": "2022-06-13T07:54:53.635285Z"
    }
   },
   "outputs": [],
   "source": [
    "flux_select = popsynth.HardFluxSelection()\n",
    "flux_select.boundary = 1e-6"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7a85bdb5",
   "metadata": {},
   "source": [
    "Now, we can put it all together and create a survey:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "ba77e35d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-13T07:54:53.639212Z",
     "iopub.status.busy": "2022-06-13T07:54:53.638689Z",
     "iopub.status.idle": "2022-06-13T07:54:57.850121Z",
     "shell.execute_reply": "2022-06-13T07:54:57.849490Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[32m\u001b[1m INFO     \u001b[0m| \u001b[32m\u001b[1m registering auxilary sampler: dummy \u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[32m\u001b[1m INFO     \u001b[0m| \u001b[32m\u001b[1m The volume integral is 371.0099992828878 \u001b[0m\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "0bea71e697034ce396b746f7994dd772",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Drawing distances:   0%|          | 0/352 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[32m\u001b[1m INFO     \u001b[0m| \u001b[32m\u001b[1m Expecting 352 total objects \u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[32m\u001b[1m INFO     \u001b[0m| \u001b[32m\u001b[1m Sampling: dummy \u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[32m\u001b[1m INFO     \u001b[0m| \u001b[32m\u001b[1m applying selection to fluxes \u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[32m\u001b[1m INFO     \u001b[0m| \u001b[32m\u001b[1m Applying selection from dummy which selected 67 of 352 objects \u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[32m\u001b[1m INFO     \u001b[0m| \u001b[32m\u001b[1m Before auxiliary selection there were 226 objects selected \u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[32m\u001b[1m INFO     \u001b[0m| \u001b[32m\u001b[1m Detected 42 distances \u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[32m\u001b[1m INFO     \u001b[0m| \u001b[32m\u001b[1m Detected 42 objects out to a distance of 1.84 \u001b[0m\n"
     ]
    }
   ],
   "source": [
    "ps = popsynth.SchechterZPowerCosmoPopulation(\n",
    "    Lambda=50, delta=-2, Lmin=1e52, alpha=1.5, seed=1234\n",
    ")\n",
    "\n",
    "aux_parameter.set_selection_probability(box_select)\n",
    "\n",
    "ps.set_flux_selection(flux_select)\n",
    "\n",
    "ps.add_auxiliary_sampler(aux_parameter)\n",
    "\n",
    "pop = ps.draw_survey()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "586d1094",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-13T07:54:57.853900Z",
     "iopub.status.busy": "2022-06-13T07:54:57.853236Z",
     "iopub.status.idle": "2022-06-13T07:54:58.017357Z",
     "shell.execute_reply": "2022-06-13T07:54:58.016708Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[2m WARNING  \u001b[0m| \u001b[33m\u001b[2m This will be removed in future versions use x.fluxes \u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[2m WARNING  \u001b[0m| \u001b[33m\u001b[2m This will be removed in future versions use x.fluxes.selected \u001b[0m\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x7fbc8f349730>"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x504 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "ax.scatter(\n",
    "    np.log10(pop.fluxes_observed), pop.dummy, color=\"purple\", alpha=0.7, label=\"total\"\n",
    ")\n",
    "ax.scatter(\n",
    "    np.log10(pop.selected_fluxes_observed),\n",
    "    pop.dummy.selected,\n",
    "    color=\"yellow\",\n",
    "    alpha=0.7,\n",
    "    label=\"selected\",\n",
    ")\n",
    "\n",
    "ax.set(xlabel=\"log10 fluxes\", ylabel=\"dummy\")\n",
    "ax.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e7063e27",
   "metadata": {},
   "source": [
    "## custom selections\n",
    "\n",
    "we can also create our own custom selection functions.\n",
    "\n",
    "\n",
    "First, we will look at simply creating a selection. For simplicity, we will look at the Bernoulli selection class built in:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "35c15dcf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-13T07:54:58.020832Z",
     "iopub.status.busy": "2022-06-13T07:54:58.020553Z",
     "iopub.status.idle": "2022-06-13T07:54:58.026098Z",
     "shell.execute_reply": "2022-06-13T07:54:58.025376Z"
    }
   },
   "outputs": [],
   "source": [
    "class BernoulliSelection(popsynth.SelectionProbability):\n",
    "    \n",
    "    # required to register class!\n",
    "    _selection_name = \"BernoulliSelection\"\n",
    "\n",
    "    # define the parameters to be used\n",
    "    probability = popsynth.SelectionParameter(vmin=0, vmax=1, default=0.5)\n",
    "\n",
    "    def __init__(self) -> None:\n",
    "\n",
    "        super(BernoulliSelection, self).__init__(name=\"Bernoulli\")\n",
    "\n",
    "    def draw(self, size: int) -> None:\n",
    "        \"\"\"\n",
    "        The draw function takes an integer for the size of the \n",
    "        samples and sets the private variable _selections which \n",
    "        should be an array of boolean values\n",
    "        \n",
    "        \"\"\"\n",
    "        \n",
    "        self._selection = stats.bernoulli.rvs(\n",
    "                self._probability, size=size).astype(bool)  # type: np.ndarray\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "45c1aa02",
   "metadata": {},
   "source": [
    "The procedure can become arbitraliy complex. It is important to note that selections will know about several private variables:\n",
    "\n",
    "```_observed_flux```\n",
    "```_observed_value```\n",
    "```_distance```\n",
    "```_luminosity```\n",
    "\n",
    "\n",
    "which enables you to use these values in your selection function.\n",
    "\n",
    "Because of this, several of the build in selections can be used to select on these variables (though some of this is done in the background for you.)\n",
    "\n",
    "\n",
    "```python\n",
    "my_box_selection = popsynth.BoxSelection(name=\"box_flux_selection\", use_flux=True)\n",
    "my_box_selection.vmin = 1E-4\n",
    "my_box_selection.vmax = 1E-2\n",
    "\n",
    "```\n",
    "\n",
    "Setting this as the flux selector will select only the fluxes above and below the limits"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "0bea71e697034ce396b746f7994dd772": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_59291dc9e6a948b6959eee92a043b1c5",
        "IPY_MODEL_5e71b8a910cd46409e09510daaa6addd",
        "IPY_MODEL_fde463589b9b45e598a1d76833557579"
       ],
       "layout": "IPY_MODEL_71972553066c49169036c2e47037d5bb"
      }
     },
     "0f7cbf3be58648f2b4151d91dc5b82ba": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "102cbb6f986e40fcbd97055c0e1de621": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "296ef9af01a04b40a751bdbb801e162e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "bar_color": "#B833FF",
       "description_width": ""
      }
     },
     "4597c57c759c402389206eb45a79469e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "59291dc9e6a948b6959eee92a043b1c5": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_0f7cbf3be58648f2b4151d91dc5b82ba",
       "placeholder": "​",
       "style": "IPY_MODEL_102cbb6f986e40fcbd97055c0e1de621",
       "value": "Drawing distances: 100%"
      }
     },
     "5e71b8a910cd46409e09510daaa6addd": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_4597c57c759c402389206eb45a79469e",
       "max": 352.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_296ef9af01a04b40a751bdbb801e162e",
       "value": 352.0
      }
     },
     "71972553066c49169036c2e47037d5bb": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "7ce6258c24d746499ce7c69b63a886b7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "8072bfc73a114accaf8582210d1852c2": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "fde463589b9b45e598a1d76833557579": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_8072bfc73a114accaf8582210d1852c2",
       "placeholder": "​",
       "style": "IPY_MODEL_7ce6258c24d746499ce7c69b63a886b7",
       "value": " 352/352 [00:00&lt;00:00, 8887.68it/s]"
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
